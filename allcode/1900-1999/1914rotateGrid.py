# 给你一个大小为 m x n 的整数矩阵 grid​​​ ，其中 m 和 n 都是 偶数 ；另给你一个整数 k 。
#
# 矩阵由若干层组成，如下图所示，每种颜色代表一层：
#
#
#
# 矩阵的循环轮转是通过分别循环轮转矩阵中的每一层完成的。在对某一层进行一次循环旋转操作时，层中的每一个元素将会取代其 逆时针 方向的相邻元素。轮转示例如下：
#
#
# 返回执行 k 次循环轮转操作后的矩阵。
#
#
#
# 示例 1：
#
#
# 输入：grid = [[40,10],[30,20]], k = 1
# 输出：[[10,20],[40,30]]
# 解释：上图展示了矩阵在执行循环轮转操作时每一步的状态。
# 示例 2：
#
#
# 输入：grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 2
# 输出：[[3,4,8,12],[2,11,10,16],[1,7,6,15],[5,9,13,14]]
# 解释：上图展示了矩阵在执行循环轮转操作时每一步的状态。
#
#
# 提示：
#
# m == grid.length
# n == grid[i].length
# 2 <= m, n <= 50
# m 和 n 都是 偶数
# 1 <= grid[i][j] <= 5000
# 1 <= k <= 109

from leetcode.allcode.competition.mypackage import *

class Solution:
    def rotateGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:
        r, c = len(grid), len(grid[0])
        mn = min(r, c) // 2
        for i in range(mn):
            lev = []
            for j in range(i, c - i):
                lev.append(grid[i][j])
            for j in range(i + 1, r - i):
                lev.append(grid[j][c - i - 1])
            for j in range(c - i - 2, i - 1, -1):
                lev.append(grid[r - i - 1][j])
            for j in range(r - i - 2, i, - 1):
                lev.append(grid[j][i])

            m = len(lev)
            # print(m)
            kk = k % m
            lev = lev[kk:] + lev[:kk]
            t = 0
            for j in range(i, c - i):
                grid[i][j] = lev[t]
                t += 1
            for j in range(i + 1, r - i):
                grid[j][c - i - 1] = lev[t]
                t += 1
            for j in range(c - i - 2, i - 1, -1):
                grid[r - i - 1][j] = lev[t]
                t += 1
            for j in range(r - i - 2, i, - 1):
                grid[j][i] = lev[t]
                t += 1

        return grid


so = Solution()
print(so.rotateGrid(grid = [[3970,1906,3608,298,3072,3546,1502,773,4388,3115,747,3937],[2822,304,4179,1780,1709,1058,3645,681,2910,2513,4357,1038],[4471,2443,218,550,2766,4780,1997,1672,4095,161,4645,3838],[2035,2350,3653,4127,3208,4717,4347,3452,1601,3725,3060,2270],[188,2278,81,3454,3204,1897,2862,4381,3704,2587,743,3832],[996,4499,66,2742,1761,1189,608,509,2344,3271,3076,108],[3274,2042,2157,3226,2938,3766,2610,4510,219,1276,3712,4143],[744,234,2159,4478,4161,4549,4214,4272,701,4376,3110,4896],[4431,1011,757,2690,83,3546,946,1122,2216,3944,2715,2842],[898,4087,703,4153,3297,2968,3268,4717,1922,2527,3139,1516],[1086,1090,302,1273,2292,234,3268,2284,4203,3838,2227,3651],[2055,4406,2278,3351,3217,2506,4525,233,3829,63,4470,3170],[3797,3276,1755,1727,1131,4108,3633,1835,1345,1293,2778,2805],[1215,84,282,2721,2360,2321,1435,2617,1202,2876,3420,3034]], k = 405548684))
print(so.rotateGrid(grid = [[40,10],[30,20]], k = 1))
print(so.rotateGrid(grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 2))
print(so.rotateGrid(grid = [[40,10],[30,20]], k = 1))




