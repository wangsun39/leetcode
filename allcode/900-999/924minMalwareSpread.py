# 给出了一个由 n 个节点组成的网络，用 n × n 个邻接矩阵图 graph 表示。在节点网络中，当 graph[i][j] = 1 时，表示节点 i 能够直接连接到另一个节点 j。
#
# 一些节点 initial 最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。
#
# 假设 M(initial) 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。
#
# 如果从 initial 中移除某一节点能够最小化 M(initial)， 返回该节点。如果有多个节点满足条件，就返回索引最小的节点。
#
# 请注意，如果某个节点已从受感染节点的列表 initial 中删除，它以后仍有可能因恶意软件传播而受到感染。
#
#
#
# 示例 1：
#
# 输入：graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
# 输出：0
# 示例 2：
#
# 输入：graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
# 输出：0
# 示例 3：
#
# 输入：graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
# 输出：1
#
#
# 提示：
#
# n == graph.length
# n == graph[i].length
# 2 <= n <= 300
# graph[i][j] == 0 或 1.
# graph[i][j] == graph[j][i]
# graph[i][i] == 1
# 1 <= initial.length <= n
# 0 <= initial[i] <= n - 1
# initial 中所有整数均不重复

from leetcode.allcode.competition.mypackage import *

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        initial = set(initial)
        n = len(graph)
        fa = list(range(n))
        def find(x):
            if x != fa[x]:
                fa[x] = find(fa[x])
            return fa[x]
        def union(x, y):
            fa[find(y)] = find(x)
        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j]:
                    union(i, j)
        for i in range(n):
            find(i)
        d = defaultdict(list)  # d[i] 表示根节点为i的连通块list
        for i, x in enumerate(fa):
            d[x].append(i)
        rep = defaultdict(list)  # rep[i] 表示根节点为i的连通块中被感染的点
        for i, l in d.items():
            for j in l:
                if j in initial:
                    rep[i].append(j)
        mxl = [len(d[i]) for i in rep.keys() if len(rep[i]) == 1]  # 被感染的最大连通块列表，并且这个连通块初始只有一个点被感染
        if len(mxl) == 0:
            return min(initial)
        mx = max(mxl)
        ans = inf
        for i, l in d.items():
            if len(l) == mx and len(rep[i]) == 1:
                ans = min(ans, rep[i][0])
        return ans



so = Solution()
print(so.minMalwareSpread([[1,0,0,0],[0,1,0,0],[0,0,1,1],[0,0,1,1]], [3,1]))
print(so.minMalwareSpread(graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]))
print(so.minMalwareSpread(graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]))
print(so.minMalwareSpread(graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]))




