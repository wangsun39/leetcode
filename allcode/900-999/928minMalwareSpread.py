# 给定一个由 n 个节点组成的网络，用 n x n 个邻接矩阵 graph 表示。在节点网络中，只有当 graph[i][j] = 1 时，节点 i 能够直接连接到另一个节点 j。
#
# 一些节点 initial 最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。
#
# 假设 M(initial) 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。
#
# 我们可以从 initial 中删除一个节点，并完全移除该节点以及从该节点到任何其他节点的任何连接。
#
# 请返回移除后能够使 M(initial) 最小化的节点。如果有多个节点满足条件，返回索引 最小的节点 。
#
#
#
# 示例 1：
#
# 输入：graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
# 输出：0
# 示例 2：
#
# 输入：graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
# 输出：1
# 示例 3：
#
# 输入：graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
# 输出：1
#
#
# 提示：
#
# n == graph.length
# n == graph[i].length
# 2 <= n <= 300
# graph[i][j] 是 0 或 1.
# graph[i][j] == graph[j][i]
# graph[i][i] == 1
# 1 <= initial.length < n
# 0 <= initial[i] <= n - 1
#  initial 中每个整数都不同

from leetcode.allcode.competition.mypackage import *

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        def calc(x0):  # x是删除的点
            g = defaultdict(list)
            for i in range(n):
                for j in range(i + 1, n):
                    if i == x0 or j == x0: continue
                    if graph[i][j] == 0: continue
                    g[i].append(j)
                    g[j].append(i)
            dq1 = deque(x for x in initial if x != x0)
            vis = [0] * n
            for x in initial:
                vis[x] = 1
            while dq1:
                dq2 = deque()
                while dq1:
                    x = dq1.popleft()
                    for y in g[x]:
                        if vis[y] == 0:
                            dq2.append(y)
                            vis[y] = 1
                dq1 = dq2
            return sum(vis) - 1
        mn = inf
        initial.sort()
        for x in initial:
            v = calc(x)
            if v < mn:
                ans = x
                mn = v
        return ans

so = Solution()
print(so.minMalwareSpread(graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]))
print(so.minMalwareSpread(graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]))
print(so.minMalwareSpread(graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]))




