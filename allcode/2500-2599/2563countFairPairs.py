# 给你一个下标从 0 开始、长度为 n 的整数数组 nums ，和两个整数 lower 和 upper ，返回 公平数对的数目 。
#
# 如果 (i, j) 数对满足以下情况，则认为它是一个 公平数对 ：
#
# 0 <= i < j < n，且
# lower <= nums[i] + nums[j] <= upper
#
#
# 示例 1：
#
# 输入：nums = [0,1,7,4,4,5], lower = 3, upper = 6
# 输出：6
# 解释：共计 6 个公平数对：(0,3)、(0,4)、(0,5)、(1,3)、(1,4) 和 (1,5) 。
# 示例 2：
#
# 输入：nums = [1,7,9,2,5], lower = 11, upper = 11
# 输出：1
# 解释：只有单个公平数对：(2,3) 。
#
#
# 提示：
#
# 1 <= nums.length <= 105
# nums.length == n
# -109 <= nums[i] <= 109
# -109 <= lower <= upper <= 109

from leetcode.allcode.competition.mypackage import *

class Solution:
    def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:
        nums.sort()
        ans = 0
        # print(nums)
        for i, x in enumerate(nums):
            t1, t2 = lower - x, upper - x
            p1 = bisect_left(nums, t1)
            p2 = bisect_right(nums, t2)
            # print(p1, p2, i, x, t1, t2)
            # if p2 < len(nums) and nums[p2] == x:
            #     p2 += 1
            if p1 <= i < p2:
                ans += (p2 - p1 - 1)
            else:
                ans += (p2 - p1)
        return ans // 2


so = Solution()
print(so.countFairPairs([-1000000000,-1000000000,-1000000000,-1000000000,-1000000000,31721797,69399673,-88230220,31721797,31721797,-88230220,69399673,31721797,69399673,-88230220,-88230220,-1000000000,-1000000000,-1000000000,69399673,69399673,-1000000000,-1000000000,-1000000000,59416834,-1000000000,59416834,-1000000000,-1000000000,-88230220,-1000000000,69399673,69399673,-88230220,-1000000000,-1000000000,-1000000000,31721797,-88230220,69399673,31721797,31721797,-1000000000,-1000000000,-1000000000,31721797,-1000000000,-1000000000,-1000000000,-1000000000,-1000000000,-88230220,-1000000000,59416834,69399673,-88230220,59416834,-1000000000,-1000000000,31721797,-1000000000,-1000000000,-88230220,-88230220,69399673,-1000000000,-88230220,31721797,-1000000000,-1000000000,-1000000000,-1000000000,59416834,-1000000000,-88230220,-1000000000,-1000000000,69399673,-1000000000,-88230220,69399673,-1000000000,-1000000000,69399673,-1000000000,-1000000000,-1000000000,-1000000000,69399673,-1000000000,-88230220,31721797,-1000000000,69399673,-88230220,31721797,31721797,59416834,-1000000000,31721797,-1000000000,-1000000000,31721797,-1000000000,-1000000000,-1000000000,-1000000000,69399673,-1000000000,-1000000000,-1000000000,59416834,-88230220,69399673,-88230220,69399673,59416834,59416834,-88230220,31721797,-1000000000,59416834,69399673,-1000000000,-1000000000,69399673,-88230220,-1000000000,69399673,-1000000000,69399673,-1000000000,59416834,-1000000000,59416834,-1000000000,-1000000000,-1000000000,59416834,31721797,-1000000000,69399673,-1000000000,69399673,-1000000000,-88230220,-1000000000,-1000000000,-1000000000,-1000000000,-88230220,-1000000000,-88230220,59416834,59416834,-1000000000,-1000000000,69399673,59416834,-1000000000,59416834,59416834,69399673,-88230220,-88230220,31721797,-1000000000,-1000000000,-1000000000,69399673,-1000000000,31721797,59416834,31721797,-1000000000,-1000000000,69399673,-1000000000,69399673,31721797,69399673,-1000000000,31721797,69399673,-1000000000,-1000000000,31721797,-1000000000,31721797,-1000000000,59416834,31721797,-1000000000,-88230220,-1000000000,-1000000000,-1000000000,59416834,59416834,31721797,31721797,69399673,-1000000000,31721797,-88230220,-1000000000,31721797,59416834,-1000000000,-1000000000,-1000000000,-1000000000,-1000000000,-1000000000,-1000000000,59416834,31721797,59416834,69399673,-1000000000,59416834,-1000000000,-1000000000,59416834,-1000000000,69399673,-1000000000,31721797,-1000000000,-1000000000,-1000000000,-1000000000,-88230220,-88230220,59416834,-1000000000,-1000000000,-1000000000,-1000000000,-1000000000,31721797,59416834,59416834,-1000000000,31721797,-1000000000,-1000000000,-1000000000,59416834,-1000000000,69399673,-1000000000,-1000000000,59416834,69399673,-1000000000,69399673,-88230220,59416834,-1000000000,69399673,59416834,69399673,-1000000000,59416834,-1000000000,-88230220,-1000000000,31721797,-1000000000,59416834,-88230220,59416834,59416834,31721797,59416834,-1000000000,31721797,31721797,31721797,-88230220,69399673,-1000000000,-1000000000,-1000000000,31721797,-1000000000,59416834,59416834,-1000000000,-1000000000,-1000000000,-88230220,-88230220,59416834,-88230220,-1000000000,69399673,-1000000000,-1000000000,31721797,-1000000000,-1000000000,-88230220,-1000000000,-88230220,-1000000000,-88230220,31721797,31721797,-1000000000,-88230220,59416834,69399673,-1000000000,-1000000000,-1000000000,-1000000000,59416834,31721797,-1000000000,-88230220,-1000000000,-1000000000,-1000000000,31721797,59416834,-1000000000,59416834,-1000000000,31721797,-1000000000,69399673,31721797,-88230220,31721797,-1000000000,69399673,-1000000000,-1000000000,69399673,-88230220,-1000000000,59416834,-1000000000,-1000000000,69399673,31721797,-1000000000,-1000000000,-1000000000,-1000000000,-88230220,59416834,-88230220,-88230220,69399673,69399673,31721797,-1000000000,69399673,31721797,-1000000000,-88230220,-1000000000,-1000000000,-1000000000,69399673,59416834,-1000000000,-1000000000,69399673,-1000000000,-1000000000,-1000000000,-1000000000,-1000000000,-1000000000,-1000000000,-1000000000,-1000000000,69399673,31721797,-1000000000,-1000000000,59416834,-1000000000,-88230220,-1000000000,-1000000000,59416834,59416834,-88230220,-1000000000,-1000000000,59416834,-88230220,69399673,31721797,-1000000000,-1000000000,-1000000000,-1000000000,-88230220,-1000000000,59416834,-1000000000,-88230220,-1000000000,-1000000000,-1000000000,-1000000000,69399673,69399673,-1000000000,31721797,-1000000000,-1000000000,-1000000000,59416834,31721797,-1000000000,31721797,-1000000000,31721797,-1000000000,31721797,-1000000000,69399673,-1000000000,-1000000000,-1000000000,69399673,31721797,59416834,-1000000000,-1000000000,-1000000000,-1000000000,-1000000000,-88230220,-88230220,-88230220,31721797,-1000000000,-1000000000,31721797,-1000000000,69399673,-1000000000,-1000000000,-1000000000,-1000000000,69399673,-1000000000,-88230220,-1000000000,-88230220,-1000000000,-1000000000,-1000000000,59416834,-1000000000,-1000000000,-88230220,69399673,31721797,-1000000000,-1000000000,-1000000000,69399673,-1000000000,69399673,31721797,-88230220,-1000000000,59416834,-88230220,-1000000000,-1000000000,-1000000000,-1000000000,59416834,-1000000000,-1000000000,-88230220,-1000000000,-1000000000,59416834,-1000000000,-1000000000,59416834,-1000000000,-88230220,-1000000000,59416834],
-105870583,
98935074))
print(so.countFairPairs(nums = [0,1,7,4,4,5], lower = 3, upper = 6))
print(so.countFairPairs(nums = [0,0,0,0,0,0], lower = 0, upper = 0))
print(so.countFairPairs(nums = [1,7,9,2,5], lower = 11, upper = 11))




