# 给你一个下标从 0 开始的二维整数数组 nums 。一开始你的分数为 0 。你需要执行以下操作直到矩阵变为空：
#
# 矩阵中每一行选取最大的一个数，并删除它。如果一行中有多个最大的数，选择任意一个并删除。
# 在步骤 1 删除的所有数字中找到最大的一个数字，将它添加到你的 分数 中。
# 请你返回最后的 分数 。
#
#
#
# 示例 1：
#
# 输入：nums = [[7,2,1],[6,4,2],[6,5,3],[3,2,1]]
# 输出：15
# 解释：第一步操作中，我们删除 7 ，6 ，6 和 3 ，将分数增加 7 。下一步操作中，删除 2 ，4 ，5 和 2 ，将分数增加 5 。最后删除 1 ，2 ，3 和 1 ，将分数增加 3 。所以总得分为 7 + 5 + 3 = 15 。
# 示例 2：
#
# 输入：nums = [[1]]
# 输出：1
# 解释：我们删除 1 并将分数增加 1 ，所以返回 1 。
#
#
# 提示：
#
# 1 <= nums.length <= 300
# 1 <= nums[i].length <= 500
# 0 <= nums[i][j] <= 103
from leetcode.allcode.competition.mypackage import *


class Solution:
    def matrixSum(self, nums: List[List[int]]) -> int:
        ans = 0
        for x in nums:
            x.sort(reverse=True)
        r = len(nums)
        c = max(len(x) for x in nums)

        for j in range(c):
            cur = 0
            for i in range(r):
                if j < len(nums[i]) and cur < nums[i][j]:
                    cur = nums[i][j]
            ans += cur
        return ans


so = Solution()
print(so.matrixSum(nums = [[1,8,16,15,12,9,15,11,18,6,16,4,9,4],[3,19,8,17,19,4,9,3,2,10,15,17,3,11],[13,10,19,20,6,17,15,14,16,8,1,17,0,2],[12,20,0,19,15,10,7,10,2,6,18,7,7,4],[17,14,2,2,10,16,15,3,9,17,9,3,17,10],[17,6,19,17,18,9,14,2,19,12,10,18,7,9],[5,6,5,1,19,8,15,2,2,4,4,1,2,17],[12,16,8,16,7,6,18,13,18,8,14,15,20,11],[2,10,19,3,15,18,20,10,6,7,0,8,3,7],[11,5,10,13,1,3,4,7,1,18,20,17,19,2],[0,3,20,6,19,18,3,12,2,11,3,1,19,0],[6,5,3,15,6,1,0,17,13,19,3,8,2,7],[2,20,9,11,13,5,1,16,14,1,19,3,12,6]]))
print(so.matrixSum(nums = [[7,2,1],[6,4,2],[6,5,3],[3,2,1]]))
print(so.matrixSum(nums = [[1]]))

nums = [[7,2,1],[6,4,2],[6,5,3],[3,2,1]]
a= zip(*nums)
b =1

