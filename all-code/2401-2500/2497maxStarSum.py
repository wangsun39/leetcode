# 给你一个 n 个点的无向图，节点从 0 到 n - 1 编号。给你一个长度为 n 下标从 0 开始的整数数组 vals ，其中 vals[i] 表示第 i 个节点的值。
#
# 同时给你一个二维整数数组 edges ，其中 edges[i] = [ai, bi] 表示节点 ai 和 bi 之间有一条双向边。
#
# 星图 是给定图中的一个子图，它包含一个中心节点和 0 个或更多个邻居。换言之，星图是给定图中一个边的子集，且这些边都有一个公共节点。
#
# 下图分别展示了有 3 个和 4 个邻居的星图，蓝色节点为中心节点。
#
#
#
# 星和 定义为星图中所有节点值的和。
#
# 给你一个整数 k ，请你返回 至多 包含 k 条边的星图中的 最大星和 。
#
#
#
# 示例 1：
#
#
#
# 输入：vals = [1,2,3,4,10,-10,-20], edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[3,6]], k = 2
# 输出：16
# 解释：上图展示了输入示例。
# 最大星和对应的星图在上图中用蓝色标出。中心节点是 3 ，星图中还包含邻居 1 和 4 。
# 无法得到一个和大于 16 且边数不超过 2 的星图。
# 示例 2：
#
# 输入：vals = [-5], edges = [], k = 0
# 输出：-5
# 解释：只有一个星图，就是节点 0 自己。
# 所以我们返回 -5 。
#
#
# 提示：
#
# n == vals.length
# 1 <= n <= 105
# -104 <= vals[i] <= 104
# 0 <= edges.length <= min(n * (n - 1) / 2, 105)
# edges[i].length == 2
# 0 <= ai, bi <= n - 1
# ai != bi
# 0 <= k <= n - 1
from typing import List
from typing import Optional
from cmath import inf
from collections import deque
# de = deque([1, 2, 3])
# de.append(4)
# de.appendleft(6)
# de.pop()
# de.popleft()
from itertools import pairwise
# Definition for a binary tree node.
from collections import Counter
from collections import defaultdict
# d = Counter(list1)
# d = defaultdict(int)
import math
import random
# random.uniform(a, b)，用于生成一个指定范围内的随机浮点数，闭区间
# randint和randrange的区别：
# randint 产生的随机数区间是包含左右极限的，也就是说左右都是闭区间的[1, n]，能取到1和n。
# 而 randrange 产生的随机数区间只包含左极限，也就是左闭右开的[1, n)，1能取到，而n取不到。

# 浮点数： price = "{:.02f}".format(price)
# newword = float(word[1:]) * (100 - discount) / 100
# newword = "%.2f" % newword
# a.isalpha()  # 判断字符串中是否所有的字符都是字母
# a.isdigit() # 判断字符串中是否所有的字符都是整数
# a.isalnum()  # 判断字符串中是否所有的字符都是字母or数字
# a.isspace()  # 判断字符串中是否所有的字符都是空白符
# a.swapcase()  # 转换大小写

import bisect
# bisect_right：
# 若序列a中存在与x相同的元素，则返回x相等元素右侧插入点的索引位置
# 若序列a中不存在与x相同的元素，则返回与x左侧距离最近元素插入点的索引位置
# pos = bisect.bisect_right(left, tail)
# bisect_left：
# 若序列a中存在与x相同的元素，则返回x相等元素左侧插入点的索引位置
# 若序列a中不存在与x相同的元素，则返回与x右侧距离最近元素插入点的索引位置
import heapq
# heap.heapify(nums) # 小顶堆
# heapq.heappop() 函数弹出堆中最小值
# heapq.heappush(nums, 1)
# heapq.heapreplace(heap, item)  删除最小值并添加新值
# 如果需要获取堆中最大或最小的范围值，则可以使用heapq.nlargest() 或heapq.nsmallest() 函数

# Map = [['U' for _ in range(n)] for _ in range(m)]

from functools import lru_cache, cache
from typing import List
# @lru_cache(None)

# bit位 函数：
# n.bit_length()  数值的二进制的长度数
# value = int(s, 2)
# lowbit(i) 即i&-i	表示这个数的二进制表示中最低位的1所对应的值
# n>>k & 1	求n的第k位数字
# x | (1 << k)	将x第k位 置为1
# x ^ (1 << k)	将x第k位取反
# x & (x - 1)	将x最右边的1置为0(去掉最右边的1)
# x | (x + 1)	将x最右边的0置为1
# x & 1	判断奇偶性 真为奇，假为偶

# x / y 上取整 (x + y - 1) // y
# x / y 下取整 x // y
# x / y 四舍五入 int(x / y + 0.5)

import string
# string.digits  表示 0123456789
# string.letters：包含所有字母(大写或小写字符串，在python3.0中，使用string.ascii-letters代替)
# string.ascii_lowercase：包含所有小写字母的字符串
# string.printable：包含所有可打印字符的字符串
# string.punctuation：包含所有标点的字符串
# string.uppercase：包含所有大写字母的字符串

# f-string用法
# name = 'sun'
# f"Hello, my name is {name}"

from itertools import accumulate
# s = list(accumulate(nums, initial=0))  # 计算前缀和

from sortedcontainers import SortedList
    # SortedList.add(value) 添加新元素，并排序。时间复杂度O(log(n)).
    # SortedList.update(iterable) 对添加的可迭代的所有元素排序。时间复杂度O(k*log(n)).
    # SortedList.clear() 移除所有元素。时间复杂度O(n).
    # SortedList.discard(value) 移除一个值元素，如果元素不存在，不报错。时间复杂度O(log(n)).
    # SortedList.remove(value) 移除一个值元素，如果元素不存在，报错ValueError。时间复杂度O(log(n)).
    # SortedList.pop(index=-1) 移除一个指定下标元素，如果有序序列为空或者下标超限，报错IndexError.
    # SortedList.bisect_left(value)
    # SortedList.bisect_right(value)
    # SortedList.count(value)
    # SortedList.index(value, start=None, Stop=None) 查找索引范围[start,stop）内第一次出现value的索引，如果value不存在，报错ValueError.

class Solution:
    def maxStarSum(self, vals: List[int], edges: List[List[int]], k: int) -> int:
        n = len(vals)
        d = defaultdict(list)
        for x, y in edges:
            d[x].append(vals[y])
            d[y].append(vals[x])
        ans = -inf
        for i in range(n):
            d[i].sort(reverse=True)
            l = min(k, len(d[i]))
            s = 0
            mx = 0
            for j in range(l):
                s += (d[i][j])
                mx = max(mx, s)
            ans = max(ans, mx + vals[i])
        return ans

so = Solution()
print(so.maxStarSum([-514,2094,-271,2178,-2409,332,618,179,2441,73,-1941,-1352,-223,939,575,430,1429,2020,-1911,-559,-1259,654,-1683,-20,2036,-1612,-59,-1503,748,-104,2353,-1618,1192,-1563,2024,1449,734,-534,-524,1993,1724,345,-1071,-267,-205,-54,-2252,953,2323,-1399],[[44,18],[23,9],[6,36],[39,30],[22,24],[9,32],[15,48],[29,33],[30,5],[15,0],[7,21],[45,18],[7,11],[30,26],[40,35],[28,41],[13,22],[9,20],[42,43],[19,36],[12,2],[26,11],[33,12],[37,24],[7,15],[28,36],[32,0],[3,28],[14,16],[41,37],[26,27],[8,35],[40,19],[1,7],[36,27],[4,21],[36,22],[11,45],[18,32],[27,31],[8,36],[4,46],[8,0],[41,40],[18,5],[7,32],[0,40],[12,46],[1,23],[11,19],[42,17],[11,2],[34,16],[9,45],[32,39],[43,47],[17,29],[47,19],[4,19],[35,43],[10,18],[10,44],[35,38],[26,47],[29,46],[4,6],[14,36],[40,7],[8,22],[27,4],[0,30],[45,19],[13,31],[21,14],[11,18],[23,20],[9,25],[16,11],[35,6],[21,16],[12,31],[37,1],[14,0],[43,11],[38,49],[48,23],[8,13],[3,19],[19,5],[12,27],[30,21],[36,13],[7,26],[43,31],[31,25],[24,42],[40,20],[44,41],[44,46],[38,30],[20,41],[37,16],[17,1],[12,8],[8,27],[42,8],[12,40],[32,43],[16,0],[44,1],[31,44],[15,22],[27,33],[1,15],[41,43],[0,25],[22,46],[28,47],[30,20],[37,39],[4,47],[13,11],[2,24],[1,0],[46,5],[17,31],[17,43],[28,18],[45,25],[12,47],[10,20],[16,41],[44,26],[32,16],[27,23],[15,25],[45,32],[1,36],[39,12],[47,6],[41,42],[45,47],[41,46],[7,41],[43,10],[35,1],[10,29],[13,32],[30,24],[21,36],[10,15],[17,37],[21,24],[32,40],[21,43],[31,30],[5,45],[19,31],[22,27],[2,18],[6,23],[48,49],[31,4],[17,5],[19,25],[20,26],[39,11],[45,31],[8,31],[3,11],[30,3],[24,27],[4,29],[12,7],[28,22],[32,2],[31,34],[42,14],[34,17],[19,21],[44,42],[23,15],[7,27],[22,3],[4,1],[47,1],[9,34],[17,32],[27,25],[38,42],[31,3],[42,15],[12,16],[6,45],[38,6],[15,12],[1,43],[9,15],[1,19],[23,49],[37,38],[38,29],[41,34],[2,37],[42,25],[34,46],[43,37],[25,41],[7,28],[32,14],[24,13],[13,1],[14,8],[11,42],[49,6],[48,37],[9,29],[29,25],[30,2],[32,47],[3,23],[31,41],[22,45],[7,47],[17,4],[43,23],[18,8],[18,37],[48,34],[15,31],[2,13],[0,20],[10,17],[25,6],[43,28],[18,13],[19,14],[1,42],[47,35],[21,45],[29,15],[12,28],[31,1],[4,39],[36,48],[9,19],[3,29],[26,37],[36,3],[39,41],[21,49],[26,42],[22,34],[16,36],[4,5],[29,6],[30,13],[12,3],[18,0],[17,14],[18,19],[9,48],[39,6],[27,34],[42,33],[39,18],[38,5],[17,3],[36,18],[9,2],[29,41],[0,43],[2,27],[47,36],[19,27],[3,48],[7,31],[5,6],[17,49],[48,7],[48,44],[13,9],[26,6],[31,39],[33,32],[4,3],[14,5],[3,41],[8,23],[7,3],[1,34],[25,4],[20,7],[49,12],[30,47],[31,24],[1,49],[34,11],[17,39],[35,21],[13,0],[28,0],[42,28],[29,14],[30,49],[22,42],[15,28],[43,4],[4,24],[48,38],[0,21],[11,41],[49,27],[21,38],[47,5],[49,28],[35,18],[24,1],[47,27],[3,38],[5,9],[33,25],[1,5],[14,9],[11,35],[10,5],[1,46],[3,43],[27,38],[4,26],[26,5],[28,16],[0,29],[2,17],[7,4],[33,19],[0,44],[43,19],[0,19],[14,38],[24,0],[42,40],[37,28],[6,8],[28,30],[5,12],[31,11],[22,44],[1,25],[44,37],[32,6],[25,32],[41,32],[41,12],[3,6],[39,7],[6,42],[20,46],[20,18],[28,44],[27,15],[35,13],[22,21],[34,21],[19,8],[44,47],[6,15],[1,11],[45,10],[22,26],[36,0],[11,8],[20,27],[4,9],[27,6],[20,48],[12,9],[11,23],[20,6],[23,2],[12,26],[4,40],[6,9],[37,3],[30,29],[0,27],[39,36],[45,41],[22,19],[43,26],[37,25],[30,22],[30,33],[43,33],[19,49],[34,8],[23,42],[45,26],[20,22],[21,32],[26,49],[41,10],[16,27],[34,35],[9,28],[43,30],[19,39],[24,38],[25,43],[38,15],[43,18],[4,15],[34,38],[1,26],[19,24],[21,20],[43,34],[10,23],[33,17],[41,27],[44,8],[17,18],[25,17],[4,0],[0,41],[26,10],[26,18],[49,34],[32,38],[41,48],[34,2],[20,29],[4,28],[18,29],[28,27],[15,19],[35,12],[26,16],[39,5],[25,44],[26,3],[3,10],[23,7],[32,49],[49,43],[43,38],[14,43],[16,10],[20,42],[17,24],[25,40],[22,48],[26,41],[36,4],[8,45],[32,48],[43,48],[2,15],[11,36],[2,14],[37,20],[4,23],[39,10],[49,44],[36,32],[29,22],[28,40],[48,27],[33,44],[46,10],[49,31],[12,43],[27,39],[22,23],[16,47],[47,41],[30,48],[7,46],[36,42],[34,7],[33,15],[19,35],[38,45],[21,40],[26,36],[44,15],[13,15],[7,18],[24,15],[33,39],[19,17],[47,40],[36,40],[40,37],[32,46],[20,45],[15,43],[12,29],[22,17],[14,31],[9,27],[6,44],[9,8],[40,3],[30,25],[40,6],[49,8],[41,30],[15,47],[9,26],[39,0],[29,26],[20,13],[41,33],[2,44],[29,49],[38,44],[40,43],[13,25],[20,35],[29,2],[33,20],[25,36],[30,34],[5,34],[33,11],[40,23],[21,18],[49,16],[0,26],[7,29],[42,32],[27,45],[48,12],[1,27],[35,42],[15,3],[27,37],[47,39],[38,13],[25,5],[21,5],[41,23],[12,42],[4,2],[16,48],[21,1],[39,40],[9,49],[42,5],[36,37],[8,33],[19,2],[31,9],[17,11],[42,2],[1,33],[27,32],[47,9],[21,39],[43,45],[41,6],[43,36],[36,35],[8,15],[49,4],[35,4],[46,23],[42,3],[0,12],[0,38],[36,20],[11,32],[24,7],[32,37],[49,7],[3,2],[27,43],[23,19],[39,45],[5,0],[31,40],[0,33],[15,39],[5,32],[25,8],[11,12],[1,18],[22,5],[28,25],[7,25],[22,41],[41,49],[14,12],[4,30],[28,23],[15,18],[32,12],[49,40],[49,18],[27,5],[3,35],[31,2],[3,49],[6,33],[4,34],[21,42],[30,40],[2,39],[46,3],[23,18],[13,47],[17,16],[27,29],[32,3],[45,35],[49,37],[27,10],[6,2],[20,31],[3,44],[22,37],[17,7],[32,44],[6,11],[37,6],[10,25],[42,7],[1,45],[13,12],[21,15],[44,40],[7,13],[31,36],[44,9],[9,22],[28,31],[14,44],[17,35],[12,18],[36,44],[36,33],[41,36],[33,28],[11,30],[19,20],[12,23],[32,4],[22,38],[34,3],[31,48],[41,5],[46,49],[6,14],[8,21],[46,14],[37,35],[8,30],[28,5],[25,23],[7,10],[3,27],[43,2],[47,20],[44,39],[7,2],[32,34],[47,37],[27,30],[40,27],[24,5],[34,33],[40,33],[30,7],[22,43],[43,5],[46,38],[34,0],[13,4],[23,17],[5,15],[1,16],[26,25],[1,20],[23,35],[3,9],[49,11],[31,6],[29,21],[37,8],[36,49],[15,34],[45,29],[10,34],[19,37],[9,18],[13,41],[16,33],[31,37],[1,39],[45,40],[1,8],[21,47],[46,28],[23,16],[39,29],[28,48],[24,35],[27,44],[47,31],[6,7],[3,39],[37,11],[2,8],[12,1],[49,5],[12,21],[48,35],[9,42],[15,35],[14,11],[33,38],[2,10],[18,30],[12,10],[28,34],[9,38],[27,46],[1,41],[3,47],[46,45],[25,21],[23,5],[23,31],[4,33],[2,35],[25,11],[28,26],[36,38],[4,37],[38,8],[25,18],[3,5],[35,16],[11,48],[39,26],[41,17],[43,6],[14,34],[22,25],[39,14],[45,15],[48,29],[4,12],[37,29],[31,35],[20,44],[9,10],[24,41],[27,18],[13,14],[27,13],[39,46],[42,34],[44,5],[36,46],[2,48],[0,45],[38,28],[12,44],[12,20],[13,16],[29,11],[25,16],[32,23],[44,4],[42,4],[8,20],[39,42],[10,40],[17,12],[7,33],[32,10],[10,11],[43,20],[49,39],[4,10],[45,14],[32,22],[44,7],[48,6],[36,2],[11,15],[29,5],[10,13],[4,38],[36,15],[28,20],[48,17],[11,28],[9,1],[3,13],[24,36],[37,34],[21,23],[23,45],[49,35],[22,4],[40,24],[17,26],[10,38],[45,34],[17,21],[10,1],[43,29],[13,33],[5,35],[32,28],[6,34],[30,1],[14,23],[33,2],[25,47],[35,29],[0,17],[38,25],[6,19],[25,48],[25,24],[20,49],[5,37],[0,49],[43,44],[36,45],[5,8],[5,2],[13,26],[20,2],[45,13],[36,9],[18,38],[49,25],[8,7],[16,38],[35,0],[27,17],[28,13],[40,34],[24,11],[8,48],[14,10],[46,18],[10,0],[38,19],[35,27],[39,43],[23,34],[36,34],[22,14],[5,31],[12,22],[48,26],[9,40],[31,10],[48,13],[2,22],[17,30],[3,45],[17,28],[8,4],[4,11],[24,39],[43,46],[15,49],[7,38],[37,0],[35,26],[4,16],[18,41],[16,18],[16,31],[16,22],[43,16],[15,46],[10,19],[47,18],[42,31],[32,1],[18,4],[47,34],[44,34],[23,36],[2,40],[2,41],[15,14],[0,22],[44,35],[16,46],[37,46],[2,45],[40,46],[35,25],[10,37],[34,13],[23,37],[33,21],[4,41],[44,11],[6,0],[35,41],[45,16],[33,23],[43,9],[1,40],[26,21],[8,32],[5,48],[24,44],[25,46],[41,8],[48,47],[29,1],[41,14],[42,49],[15,16],[34,24],[42,30],[30,15],[34,39],[29,28],[2,25],[0,42],[41,21],[31,26],[36,29],[39,28],[11,46],[21,31],[38,26],[21,37],[8,10],[30,44],[18,22],[15,41],[1,6],[24,33],[35,28],[17,40],[14,1],[42,18],[21,48],[0,11],[33,22],[11,38],[21,9],[40,26],[42,27],[36,17],[40,13],[11,5],[6,10],[41,9],[0,3],[42,48],[39,48],[12,25],[38,1],[40,29],[8,43],[15,20],[41,19],[35,22],[27,14],[48,0],[25,3],[37,7],[12,37],[19,13],[39,13],[39,9],[9,46],[44,17],[19,30],[31,32],[26,15],[4,45],[24,14],[47,17],[26,33],[13,5],[49,47],[46,19],[37,13],[48,18],[31,18],[21,44],[10,48],[23,47],[32,15],[15,37],[37,42],[12,19],[18,40],[29,44],[34,18],[48,33],[46,8],[2,21],[30,32],[32,24],[19,34],[17,15],[24,12],[40,48],[18,14],[22,40],[42,19],[8,39],[36,10],[25,20],[1,48],[3,16],[7,36],[10,22],[0,2],[30,10],[17,46],[10,47],[23,26],[47,11],[26,19],[20,5],[29,32],[27,11],[17,13],[10,42],[16,30],[2,49],[20,11],[42,13],[35,30],[15,40],[20,16],[47,24],[43,7],[37,30],[21,3],[28,21],[5,16],[2,1],[33,9],[41,38],[5,36],[17,38],[35,10],[24,8],[7,35],[37,9],[22,49],[20,24],[48,24],[29,47],[8,28],[26,32],[31,22],[25,34],[47,42],[14,49],[29,23],[33,10],[29,34],[19,29],[30,9],[28,14],[42,16],[18,24],[18,3],[33,49],[2,16],[22,39],[7,19],[13,6],[13,29],[40,5],[0,46],[22,11],[42,46],[26,34],[45,30],[17,45],[2,46],[26,2],[19,28],[12,36],[45,24],[37,33],[39,35],[2,28],[23,39],[31,46],[48,45],[17,6],[46,24],[38,31],[4,14],[8,16],[46,21],[24,49],[33,45],[47,2],[47,38],[38,40],[30,6],[19,16],[14,40],[33,18],[21,10],[7,45],[6,21],[23,38],[23,44],[22,47],[8,17],[39,20],[48,46],[20,4],[43,24],[16,7],[30,36],[35,14]],4))
print(so.maxStarSum([1,-8,0],[[1,0],[2,1]],2))
print(so.maxStarSum(vals = [1,2,3,4,10,-10,-20], edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[3,6]], k = 2))
print(so.maxStarSum(vals = [-5], edges = [], k = 0))




