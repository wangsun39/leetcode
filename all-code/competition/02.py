
from typing import List
from typing import Optional
from cmath import inf
from collections import deque
# de = deque([1, 2, 3])
# de.append(4)
# de.appendleft(6)
# de.pop()
# de.popleft()
from itertools import pairwise
# Definition for a binary tree node.
from collections import Counter
from collections import defaultdict
# d = Counter(list1)
# d = defaultdict(int)
import math
import random
# random.uniform(a, b)，用于生成一个指定范围内的随机浮点数，闭区间
# randint和randrange的区别：
# randint 产生的随机数区间是包含左右极限的，也就是说左右都是闭区间的[1, n]，能取到1和n。
# 而 randrange 产生的随机数区间只包含左极限，也就是左闭右开的[1, n)，1能取到，而n取不到。

# 浮点数： price = "{:.02f}".format(price)
# newword = float(word[1:]) * (100 - discount) / 100
# newword = "%.2f" % newword
# a.isalpha()  # 判断字符串中是否所有的字符都是字母
# a.isdigit() # 判断字符串中是否所有的字符都是整数
# a.isalnum()  # 判断字符串中是否所有的字符都是字母or数字
# a.isspace()  # 判断字符串中是否所有的字符都是空白符
# a.swapcase()  # 转换大小写

import bisect
# bisect_right：
# 若序列a中存在与x相同的元素，则返回x相等元素右侧插入点的索引位置
# 若序列a中不存在与x相同的元素，则返回与x左侧距离最近元素插入点的索引位置
# pos = bisect.bisect_right(left, tail)
# bisect_left：
# 若序列a中存在与x相同的元素，则返回x相等元素左侧插入点的索引位置
# 若序列a中不存在与x相同的元素，则返回与x右侧距离最近元素插入点的索引位置
import heapq
# heap.heapify(nums) # 小顶堆
# heapq.heappop() 函数弹出堆中最小值
# heapq.heappush(nums, 1)
# heapq.heapreplace(heap, item)  删除最小值并添加新值
# 如果需要获取堆中最大或最小的范围值，则可以使用heapq.nlargest() 或heapq.nsmallest() 函数

# Map = [['U' for _ in range(n)] for _ in range(m)]

from functools import lru_cache, cache
from typing import List
# @lru_cache(None)

# bit位 函数：
# n.bit_length()  数值的二进制的长度数
# value = int(s, 2)
# lowbit(i) 即i&-i	返回i的最后一位1
# n>>k & 1	求n的第k位数字
# x | (1 << k)	将x第k位 置为1
# x ^ (1 << k)	将x第k位取反
# x & (x - 1)	将x最右边的1置为0(去掉最右边的1)
# x | (x + 1)	将x最右边的0置为1
# x & 1	判断奇偶性 真为奇，假为偶


import string
# string.digits  表示 0123456789
# string.letters：包含所有字母(大写或小写字符串，在python3.0中，使用string.ascii-letters代替)
# string.ascii_lowercase：包含所有小写字母的字符串
# string.printable：包含所有可打印字符的字符串
# string.punctuation：包含所有标点的字符串
# string.uppercase：包含所有大写字母的字符串

# f-string用法
# name = 'sun'
# f"Hello, my name is {name}"

from itertools import accumulate
# s = list(accumulate(nums, initial=0))  # 计算前缀和

from sortedcontainers import SortedList
    # SortedList.add(value) 添加新元素，并排序。时间复杂度O(log(n)).
    # SortedList.update(iterable) 对添加的可迭代的所有元素排序。时间复杂度O(k*log(n)).
    # SortedList.clear() 移除所有元素。时间复杂度O(n).
    # SortedList.discard(value) 移除一个值元素，如果元素不存在，不报错。时间复杂度O(log(n)).
    # SortedList.remove(value) 移除一个值元素，如果元素不存在，报错ValueError。时间复杂度O(log(n)).
    # SortedList.pop(index=-1) 移除一个指定下标元素，如果有序序列为空或者下标超限，报错IndexError.
    # SortedList.bisect_left(value)
    # SortedList.bisect_right(value)
    # SortedList.count(value)
    # SortedList.index(value, start=None, Stop=None) 查找索引范围[start,stop）内第一次出现value的索引，如果value不存在，报错ValueError.

class Solution:
    def subarrayLCM(self, nums: List[int], k: int) -> int:
        n = len(nums)
        dp = [0]
        if nums[0] == k:
            dp[0] = 1
        for i in range(1, n):
            if math.lcm(k, nums[i]) != k:
                dp.append(0)
                continue
            cur = nums[i]
            acc = 1 if nums[i] == k else 0
            for j in range(i - 1, -1, -1):
                cur = math.lcm(cur, nums[j])
                if cur > k:
                    break
                if cur == k:
                    acc += 1
            dp.append(acc)
        print(dp)
        return sum(dp)

so = Solution()
print(so.subarrayLCM([475,788,834,670,254,56,431,155,818,624,795,397,51,319,227,899,806,985,296,235,331,227,209,75,556,416,206,756,988,440,109,324,160,276,997,719,19,317,971,191,599,484,380,255,637,964,538,767,84,726,833,820,143,735,142,240,451,558,957,633,853,212,970,78,137,296,557,535,605,374,806,604,191,518,854,583,653,584,761,980,634,545,312,34,888,611,628,217,451,152,161,739,514,80,870,791,848,127,710,408,722,559,437,67,248,475,775,794,230,431,770,376,772,997,681,97,373,682,604,566,375,674,225,49,862,633,144,189,170,787,92,825,721,379,112,151,814,536,939,777,757,910,15,89,707,45,950,445,632,764,5,143,455,854,496,475,16,333,734,440,768,911,645,462,830,779,372,311,381,402,233,573,63,138,270,886,852,654,342,58,922,372,939,438,613,939,955,275,113,232,604,522,87,89,555,962,701,642,890,110,218,540,331,260,886,449,795,961,687,120,716,468,538,468,331,931,936,130,872,765,349,726,598,641,111,654,339,964,187,174,183,816,644,884,559,889,383,764,934,15,855,532,541,703,277,775,858,176,901,625,931,529,119,925,767,12,580,850,342,975,52,369,358,158,748,916,857,594,159,276,558,137,426,27,196,955,831,722,539,762,276,647,105,350,656,889,524,615,825,851,722,528,721,569,544,331,845,509,808,155,118,314,592,57,201,90,673,455,500,108,493,78,596,928,939,537,976,909,202,313,820,806,642,337,232,917,780,230,113,782,365,393,334,575,699,318,435,880,886,346,31,964,398,288,812,707,849,783,12,619,409,115,728,423,274,702,154,24,801,312,858,49,604,118,919,397,430,351,157,113,977,331,724,996,885,243,20,710,482,916,143,429,977,957,128,526,536,189,618,881,850,819,426,736,616,572,978,28,571,620,120,590,459,113,799,795,376,855,331,821,511,782,331,583,555,860,794,167,469,78,777,218,72,791,429,10,392,987,19,106,564,391,650,286,291,261,25,939,669,465,212,102,738,64,225,576,660,382,324,564,425,955,417,859,541,998,747,833,856,761,242,722,285,714,53,847,990,928,714,67,648,643,949,168,130,787,106,505,497,108,318,71,157,207,231,19,822,33,141,386,242,126,760,359,451,928,837,556,44,260,376,511,621,790,330,442,683,688,745,552,464,750,762,218,256,483,509,659,374,659,186,77,284,184,456,108,746,592,476,391,300,621,268,233,628,96,140,193,739,835,897,297,43,399,178,75,720,807,150,72,263,487,288,322,276,989,727,589,618,582,471,818,542,687,40,833,275,117,522,375,217,989,404,182,936,430,758,557,970,16,254,619,622,602,193,697,984,864,70,906,793,683,457,817,411,977,102,769,617,547,549,630,852,385,64,94,783,431,691,191,993,195,557,639,778,984,185,647,5,767,458,785,655,482,248,976,52,578,752,936,824,996,882,904,663,712,138,951,300,835,596,72,80,52,466,14,408,584,877,489,283,652,826,934,413,283,271,415,69,13,756,914,43,647,318,574,614,508,742,993,878,834,407,522,402,551,787,514,534,217,698,907,858,334,37,111,322,360,774,834,887,308,138,597,901,556,242,102,756,782,585,158,568,724,788,462,447,957,446,451,973,801,568,893,391,843,108,774,995,93,307,418,689,545,288,702,661,981,637,968,874,142,450,827,843,532,908,854,735,721,990,202,189,603,416,568,489,612,638,227,358,36,175,942,9,679,771,292,767,303,320,653,160,192,679,536,942,999,445,534,384,665,482,150,276,563,697,612,870,873,158,578,476,549,331,790,290,148,445,950,729,909,514,27,441,264,295,147,923,455,597,934,354,79,257,917,430,863,135,903,128,517,466,837,130,351,693,480,176,844,442,388,531,638,397,920,791,947,82,961,97,607,566,610,136,898,907,163,955,69,933,201,287,101,879,13,10,83,771,902,193,357,893,41,823,175,289,63,247,131,685,2,769,482,390,163,500,744,202,610,435,298,708,167,328,129,506,611,753,404,989,245,623,212,313,174,257,353,213,152,818,204,684,764,229,258,671,364,339,862,783,460,474,667,582,740,214,840,758,982,704,452,862,756,411,746,390,656,789,958,745,574,272,457,973,556,667,315,587,702,931,754,4,688,855,543,382,965,184,144,790,63,390,446,932,723,617,435,507,985,333,830,889,357,185,497,261,716,758,473,28,92,406,706,806,637,317,175,633,358,284,316,981,828,567,924,988,747,189,96,89,628,646,992,144,543,102,749,193,22,71,306,634,410,857,382,539,538,239,791],
472))
print(so.subarrayLCM(nums = [3,6,2,7,1], k = 6))
print(so.subarrayLCM(nums = [3], k = 2))




